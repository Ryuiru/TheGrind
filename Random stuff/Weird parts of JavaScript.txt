Understanding the code is best way to learn 

2. Execution COntexts and Lexical Enviroments

SYNTAX PARSER: A program that read your code and determines what it does and if its grammar is valid
LEXICAL ENVIROMENT: Where something sits physically in the code you write
EXECUTION CONTEXT: A wrapper to help manage the code that is running

Global execution context creates a : Global Object(window) and creates a special variable .this 
Global Object(window) = .this

Execution context is created (CREATION PHASE) = Global Object , 'this', Outer Enviroment(null), Your Code(Setup Memory Space for Variables and Functions "Hoisting")
Hoisting - Preloads the code preset things to undefined and readies code to be executed.

undefined =  variable hasn't been Set 

EXECUTION PHASE RUNS YOUR CODE LINE BY LINE

SINGLE THREADED: One command is executed at a time

SYNCHRONOUS: One at a time in ... in order it appears

ASYNCHRONOUS: More than one at a time

INVOCATION: running a function ()

VARIABLE ENVIRONMENT: where the variables live

SCOPE: WHERE A VARIABLE IS AVAILABLE IN YOUR CODE

3. Types and Operators

DYNAMIC TYPING: You don't tell the engine what type of data a variable holds, it figures it out while your code is running
COERCION: Converting a value from one type to another

PRIMITIVE TYPE: A type of data that represends a single value

OPERATOR: A special function that is syntactically (written) differently

OPERATOR PRECEDENCE: Which operator function get called first 

ASSOCIATIVITY: What order operator functions get called in: Left-To-Right or Right-To-Left

4. Objects and Functions 

 NAMESPACE: a container for variables and functions // Typically to keep variables and functions with the same name separate

 FIRST CLASS FUNCTIONS: Everything you can do with other types you can do with functions // assign them to variables, pass them around, create them on the fly 

 EXPRESSION: A unit of code that results in a value // It doesn't have to save to a variable.

 STATEMENT: Just does the work

 MUTATE: To change something "immutable" means it can't be changed

 ARGUMENTS: THe parameters you pass to a function //  Javascript gives you a keyword of the same name which contains them all.

 WHITESPACE: Invisible characters that create literal 'space' in your written code //  carriage returns, tabs, spaces.

 CALLBACK FUNCTION: A function you give to another function, to be run when the other function is finished. //  So the function you call (i.e. Invoke), 'calls back' by calling the function you gave it when it finishes.

 BIND: Creates a copy of a function with arguments
 CALL: Invokes a function 
 APPLY: Invokes like CALL but with Array arguments.

 FUNCTION CURRYING: Creating a copy of a function but with some preset parameters //  Very useful in mathematical situations.

4. Object-Oriented Javascript and Prototypal Inheritance

INHERITANCE: One Object gets access to the properties and methods of another object.

REFLECTION: An object can look at itself, listing and changing its properties and methods. // so javascript object has the ability to look at its own properties and methods and we can use that to use method .extend

underscore.js library = _.extend = merges objects with first object listed in argumnets 

5. Building Objects

FUNCTION CONSTRUCTORS: A normal function that is used to construct objects // THe 'this' variable points a new empty object, and that object is returned from the function automatically.

function Person() {
    this.firstName = 'jonas;
    this.lastName = 'Jonaitis';
}

var jonas = new Person(); // New sukuria objekta
 objektas Jonas sukurtas su parametrais firstName(jonas) ir lastName(jonaitis).

Person.prototype.getFullName = function(){
    return this.firstName = ' ' + this.lastName; //using a function constructor also calls this method for every object
}

POLYFILL: Code that adds a feature which the engine MAY lack.

SYNTACTIC SUGAR: A different way to type something that doesn't change how it works under the hood

6. Examining famous frameworks and libraries

METHOD CHAINING: Calling one method after another, and each method affects the parent object. // So obj.method1().method2() where both methods end up with a 'this' variable pointing at 'obj'

